functions:
  - isLoggedIn(): auth.uid !== null

  - providerIdOwnsUser(): root[root[auth.uid].relationships.belongs_to_user].properties.uid == auth.uid

  - contextIsUser(): root[root[auth.uid].relationships.belongs_to_user].properties.is_viewing == root[auth.uid].relationships.belongs_to_user
  - contextIsTeam(): root[root[root[auth.uid].relationships.belongs_to_user].properties.is_viewing].relationships.has_members[root[auth.uid].relationships.belongs_to_user] == true

  - userIsWhoTheySayTheyAre(): isLoggedIn() &&
                               providerIdOwnsUser() &&
                               ( contextIsUser() || contextIsTeam() )

  - userOrTeamIsInNodesHasUser(): prev.relationships.has_users[root[root[auth.uid].relationships.belongs_to_user].properties.is_viewing] == true
  - userOrTeamWillBeInNodesHasUser(): next.relationships.has_users[root[root[auth.uid].relationships.belongs_to_user].properties.is_viewing] == true

  - userOrTeamIsOrWillBeInNodesHasUser(): ( !prev.exists() || ( prev.exists() && userOrTeamIsInNodesHasUser() ) ) && userOrTeamWillBeInNodesHasUser()

  # the provider node must have the same key as the auth.uid
  # the user node's has_provider_id object must contain the auth.uid and the provider node's belongs_to_user must be equal to the user node's key
  # every other node's has_users must
  - writeNode(nodeId): (
                         ( next.is_type == "provider_id" && auth.uid == nodeId ) ||
                         ( next.is_type == "user" && ( ( !prev.exists() || prev.uid == auth.uid && root[auth.uid].relationships.belongs_to_user == nodeId ) && next.uid == auth.uid && root[auth.uid].relationships.belongs_to_user == nodeId ) ) ||
                         ( userIsWhoTheySayTheyAre() && userOrTeamIsOrWillBeInNodesHasUser() )
                       )

  - readNode(nodeId): userIsWhoTheySayTheyAre() && (
                        ( prev.is_type == "provider_id" && auth.uid == nodeId ) ||
                        ( prev.is_type == "user" && prev.uid == auth.uid && root[auth.uid].relationships.belongs_to_user == nodeId ) ||
                        userOrTeamIsInNodesHasUser()
                      )

schema:
  type: object
  properties:
    $nodeId:
      type: object
      properties:
        relationships:
          type: object
        properties:
          type: object
          properties:
            is_type:
              type: string
              enum:
                - task
                - user
                - team
                - provider_id
                - taskList
              #enum: [task, user, team, auth_provider, event, taskList, eventList]
          required:
            - is_type
          constraint: (!prev.exists() || prev.is_type == next.is_type)
          examples:
            - is_type: "task"
              has_dependancy: "something"
          nonexamples:
            - is_type: "thing"
              has_dependancy: "something" # Invalid type
            - missingis_type: "thing"
              has_dependancy: "something" # No type

access:
  - location: /$nodeId
    write: writeNode($nodeId)
    read: readNode($nodeId)
