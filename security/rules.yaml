functions:
  - isLoggedIn(): auth.uid !== null
  - userHasProviderId(): root[root[auth.uid].belongs_to_user].uid == auth.uid
  - userIsMemberOfUserOrTeamInUsersWorkingOn(): root[root[auth.uid].belongs_to_user].is_viewing == root[auth.uid].belongs_to_user ||
                                                root[root[root[auth.uid].belongs_to_user].is_viewing].has_members[root[auth.uid].belongs_to_user] == true
  - userIsWhoTheySayTheyAre(): isLoggedIn() &&
                               userHasProviderId() &&
                               userIsMemberOfUserOrTeamInUsersWorkingOn()

  - nodeWriteableByUsersViewing():  (
                                      !prev.exists() ||
                                      (
                                        prev.exists() &&
                                        prev.has_users[root[root[auth.uid].belongs_to_user].is_viewing] == true
                                      )
                                    ) &&
                                    next.has_users[root[root[auth.uid].belongs_to_user].is_viewing] == true
  # the provider node must have the same key as the auth.uid
  # the user node's has_provider_id object must contain the auth.uid and the provider node's belongs_to_user must be equal to the user node's key
  # every other node's has_users must
  - writeNode(nodeId): (
                         ( next.is_type == "provider_id" && auth.uid == nodeId ) ||
                         ( next.is_type == "user" && ( ( !prev.exists() || prev.uid == auth.uid && root[auth.uid].belongs_to_user == nodeId ) && next.uid == auth.uid && root[auth.uid].belongs_to_user == nodeId ) ) ||
                         ( ( next.is_type == "team" || next.is_type == "task" || next.is_type == "taskList" ) && userIsWhoTheySayTheyAre() && nodeWriteableByUsersViewing() )
                       )

schema:
  type: object
  properties:
    $nodeId:
      type: object
      properties:
        is_type:
          type: string
          enum:
            - task
            - user
            - team
            - provider_id
            - taskList
          #enum: [task, user, team, auth_provider, event, taskList, eventList]
      required:
        - is_type
      constraint: (!prev.exists() || prev.is_type == next.is_type)
      examples:
        - is_type: "task"
          has_dependancy: "something"
      nonexamples:
        - is_type: "thing"
          has_dependancy: "something" # Invalid type
        - missingis_type: "thing"
          has_dependancy: "something" # No type

access:
  - location: /$nodeId
    write: writeNode($nodeId)
    read: true
